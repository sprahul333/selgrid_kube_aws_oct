## This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
## For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven
#
## This workflow uses actions that are not certified by GitHub.
## They are provided by a third-party and are governed by
## separate terms of service, privacy policy, and support
## documentation.

#
#name: Java CI with Maven
#
#on:
#  pull_request:
#    branches: [ "main" ]
#
#jobs:
#  build:
#
#    runs-on: ubuntu-latest
#
#    steps:
#    - uses: actions/checkout@v4
#    - name: Set up JDK 21
#      uses: actions/setup-java@v4
#      with:
#        java-version: '21'
#        distribution: 'temurin'
#        cache: maven
#    -name: Install Google Chrome # Using shell script to install Google Chrome
#       run: |
#         chmod +x ./scripts/InstallChrome.sh
#                     ./scripts/InstallChrome.sh
#    - name: Build with Maven
#      run: mvn clean test # This will build the Java project with Maven
#
#    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
##    - name: Update dependency graph
##      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

name: Java CI with Maven

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest # image of the virtual machine to run on

    steps:
      - uses: actions/checkout@v4 # checkout the repository so your workflow can access it
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Install Google Chrome # Using shell script to install Google Chrome
        run: |
          chmod +x ./scripts/InstallChrome.sh
                      ./scripts/InstallChrome.sh
      - name: test with maven
        run: mvn clean test # This will build the Java project with Maven

      - name: Report test results
        uses: dorny/test-reporter@v1.9.1
        with:
                name: Maven Surefire
                path: "**/surefire-reports/TEST-*.xml"
                reporter: java-junit